/*
 *   MIT License
 *
 *   Copyright (c) 2021 Samsung Electronics Corporation
 *
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *   of this software and associated documentation files (the "Software"), to deal
 *   in the Software without restriction, including without limitation the rights
 *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *   copies of the Software, and to permit persons to whom the Software is
 *   furnished to do so, subject to the following conditions:
 *
 *   The above copyright notice and this permission notice shall be included in all
 *   copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *   SOFTWARE.
 */

#include <stdio.h>

#include <fstream>
#include <iostream>
#include <stdexcept>

#include "src/config/ConfigInterface.h"

auto license =
    R"LICENSE(/*
 *   MIT License
 *
 *   Copyright (c) 2021 Samsung Electronics Corporation
 *
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *   of this software and associated documentation files (the "Software"), to deal
 *   in the Software without restriction, including without limitation the rights
 *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *   copies of the Software, and to permit persons to whom the Software is
 *   furnished to do so, subject to the following conditions:
 *
 *   The above copyright notice and this permission notice shall be included in all
 *   copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *   SOFTWARE.
 */

)LICENSE";

int
main(void)
{
    std::cout << "\n c style interface generating ...\n";

    // Air_c.h gen start

    std::string air_h = AIR_H_GEN;
    std::ofstream air_h_file(air_h.data());

    if (false == air_h_file.is_open())
    {
        std::cout << " generation failed.\n\n";
        return -1;
    }

    air_h_file << license;
    air_h_file << "// generated by c_interface_gen module\n\n";
    air_h_file << "#ifndef AIR_C_H\n";
    air_h_file << "#define AIR_C_H\n\n";

    air_h_file << "#include <stdint.h>\n";
    air_h_file << "#include <stdbool.h>\n\n";

    air_h_file << "enum AIR_NODE\n";
    air_h_file << "{\n";

    try
    {
        uint32_t node_size = cfg::GetSentenceCount(config::ParagraphType::NODE);
        for (uint32_t i = 0; i < node_size; i++)
        {
            air_h_file << "    " << cfg::GetSentenceName(config::ParagraphType::NODE, i) << ",\n";
        }
        air_h_file << "};\n\n";

        uint32_t filter_size = cfg::GetSentenceCount(config::ParagraphType::FILTER);
        for (uint32_t i = 0; i < filter_size; i++)
        {
            air::string_view name = cfg::GetSentenceName(config::ParagraphType::FILTER, i);
            air_h_file << "enum " << name << "\n{\n";

            int32_t item_size = cfg::GetItemSizeWithFilterName(name);
            for (int32_t j = 0; j < item_size; j++)
            {
                air_h_file << "    " << cfg::GetItemStrWithFilterName(name, j) << ",\n";
            }

            air_h_file << "};\n\n";
        }

        air_h_file << "#ifdef __cplusplus\n";
        air_h_file << "extern \"C\" {\n";
        air_h_file << "#endif\n\n";

        air_h_file << "void AIR_INITIALIZE(uint32_t cpu_num);\n";
        air_h_file << "void AIR_ACTIVATE(void);\n";
        air_h_file << "void AIR_DEACTIVATE(void);\n";
        air_h_file << "void AIR_FINALIZE(void);\n";
        air_h_file << "void AIRLOG(uint32_t node_id, uint32_t filter_item, uint64_t node_index, uint64_t value);\n";
        air_h_file << "void AIRLOG_DUMMY(uint32_t node_id, uint32_t filter_item, uint64_t node_index, uint64_t value);\n";
    }
    catch (const std::out_of_range& e)
    {
        std::cout << e.what();
    }
    air_h_file << "\n";
    air_h_file << "#ifdef __cplusplus\n";
    air_h_file << "}\n";
    air_h_file << "#endif\n\n";
    air_h_file << "#endif // AIR_C_H\n";
    air_h_file.close();
    std::cout << " - Air_c.h\n";

    // Air_c.h gen end

    std::cout << " c style interface generated successfully.\n\n";
    return 0;
}
